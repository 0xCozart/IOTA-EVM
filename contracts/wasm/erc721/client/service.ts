// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "./wasmlib"
import * as events from "./events"

export interface BalanceOfResult {
	amount: wasmlib.Uint64;
}

export interface GetApprovedResult {
	approved: wasmlib.AgentID;
}

export interface IsApprovedForAllResult {
	approval: wasmlib.Bool;
}

export interface NameResult {
	name: wasmlib.String;
}

export interface OwnerOfResult {
	owner: wasmlib.AgentID;
}

export interface SymbolResult {
	symbol: wasmlib.String;
}

export interface TokenURIResult {
	tokenURI: wasmlib.String;
}

export class Erc721Service extends wasmlib.Service {

  constructor(client: BasicClient, chainId: string) {
    super(client, chainId, 0xd967c216);
  }

	public async approve(approved: wasmlib.AgentID, tokenID: wasmlib.Hash): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'approved', value: approved, },
				{ key: 'tokenID', value: tokenID, },
		];
    	await this.postRequest(0xa0661268, args);
	}

	public async burn(tokenID: wasmlib.Hash): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'tokenID', value: tokenID, },
		];
    	await this.postRequest(0x7bc1efb1, args);
	}

	public async init(name: wasmlib.String, symbol: wasmlib.String): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'name', value: name, },
				{ key: 'symbol', value: symbol, },
		];
    	await this.postRequest(0x1f44d644, args);
	}

	public async mint(tokenID: wasmlib.Hash): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'tokenID', value: tokenID, },
		];
    	await this.postRequest(0xa29addcf, args);
	}

	public async safeTransferFrom(data: wasmlib.Bytes, from: wasmlib.AgentID, to: wasmlib.AgentID, tokenID: wasmlib.Hash): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'data', value: data, },
				{ key: 'from', value: from, },
				{ key: 'to', value: to, },
				{ key: 'tokenID', value: tokenID, },
		];
    	await this.postRequest(0x130ce158, args);
	}

	public async setApprovalForAll(approval: wasmlib.Bool, operator: wasmlib.AgentID): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'approval', value: approval, },
				{ key: 'operator', value: operator, },
		];
    	await this.postRequest(0xb8d8c776, args);
	}

	public async transferFrom(from: wasmlib.AgentID, to: wasmlib.AgentID, tokenID: wasmlib.Hash): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'from', value: from, },
				{ key: 'to', value: to, },
				{ key: 'tokenID', value: tokenID, },
		];
    	await this.postRequest(0xd5e0a602, args);
	}

	public async balanceOf(owner: wasmlib.AgentID): Promise<BalanceOfResult> {
		const args: wasmlib.Argument[] = [
				{ key: 'owner', value: owner, },
		];
		const response = await this.callView(0x67ef8df4, args);
        let result: BalanceOfResult = {};

		let amount = response['amount'];
		result.amount = BigInt(0);
		if (amount) {
			result.amount = amount.readBigUInt64LE(amount);
		}

		return result;
	}

	public async getApproved(tokenID: wasmlib.Hash): Promise<GetApprovedResult> {
		const args: wasmlib.Argument[] = [
				{ key: 'tokenID', value: tokenID, },
		];
		const response = await this.callView(0xbe34b6ba, args);
        let result: GetApprovedResult = {};

		let approved = response['approved'];
		result.approved = '';
		if (approved) {
			result.approved = approved.toString(approved);
		}

		return result;
	}

	public async isApprovedForAll(operator: wasmlib.AgentID, owner: wasmlib.AgentID): Promise<IsApprovedForAllResult> {
		const args: wasmlib.Argument[] = [
				{ key: 'operator', value: operator, },
				{ key: 'owner', value: owner, },
		];
		const response = await this.callView(0x3251b0f0, args);
        let result: IsApprovedForAllResult = {};

		let approval = response['approval'];
		result.approval = false;
		if (approval) {
			result.approval = approval.readUInt8(approval)!=0;
		}

		return result;
	}

	public async name(): Promise<NameResult> {
		const args: wasmlib.Argument[] = [
		];
		const response = await this.callView(0x0df7da3a, args);
        let result: NameResult = {};

		let name = response['name'];
		result.name = '';
		if (name) {
			result.name = name.toString(name);
		}

		return result;
	}

	public async ownerOf(tokenID: wasmlib.Hash): Promise<OwnerOfResult> {
		const args: wasmlib.Argument[] = [
				{ key: 'tokenID', value: tokenID, },
		];
		const response = await this.callView(0x1246f5ad, args);
        let result: OwnerOfResult = {};

		let owner = response['owner'];
		result.owner = '';
		if (owner) {
			result.owner = owner.toString(owner);
		}

		return result;
	}

	public async symbol(): Promise<SymbolResult> {
		const args: wasmlib.Argument[] = [
		];
		const response = await this.callView(0x3e93d19b, args);
        let result: SymbolResult = {};

		let symbol = response['symbol'];
		result.symbol = '';
		if (symbol) {
			result.symbol = symbol.toString(symbol);
		}

		return result;
	}

	public async tokenURI(tokenID: wasmlib.Hash): Promise<TokenURIResult> {
		const args: wasmlib.Argument[] = [
				{ key: 'tokenID', value: tokenID, },
		];
		const response = await this.callView(0x4e1a7397, args);
        let result: TokenURIResult = {};

		let tokenURI = response['tokenURI'];
		result.tokenURI = '';
		if (tokenURI) {
			result.tokenURI = tokenURI.toString(tokenURI);
		}

		return result;
	}
}
