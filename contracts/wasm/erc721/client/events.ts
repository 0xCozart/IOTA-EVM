// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "./wasmlib"
import * as service from "./service"


export interface EventApproval {
  timestamp: wasmlib.Int32;
  approved: wasmlib.AgentID;
  owner: wasmlib.AgentID;
  tokenID: wasmlib.Hash;
}

export interface EventApprovalForAll {
  timestamp: wasmlib.Int32;
  approval: wasmlib.Bool;
  operator: wasmlib.AgentID;
  owner: wasmlib.AgentID;
}

export interface EventInit {
  timestamp: wasmlib.Int32;
  name: wasmlib.String;
  symbol: wasmlib.String;
}

export interface EventMint {
  timestamp: wasmlib.Int32;
  balance: wasmlib.Uint64;
  owner: wasmlib.AgentID;
  tokenID: wasmlib.Hash;
}

export interface EventTransfer {
  timestamp: wasmlib.Int32;
  from: wasmlib.AgentID;
  to: wasmlib.AgentID;
  tokenID: wasmlib.Hash;
}

export interface Erc721Events {
	erc721_approval: (event: EventApproval) => void;
	erc721_approvalForAll: (event: EventApprovalForAll) => void;
	erc721_init: (event: EventInit) => void;
	erc721_mint: (event: EventMint) => void;
	erc721_transfer: (event: EventTransfer) => void;
}

export function handleVmMessage(message: string[]): void {
    const messageHandlers: wasmlib.MessageHandlers = {
		'erc721.approval': (index) => {
			const evt: EventApproval = {
				timestamp: Number(message[++index]),
				approved: message[++index],
				owner: message[++index],
				tokenID: message[++index],
			};
			this.emitter.emit('erc721_approval', evt);
		},
		'erc721.approvalForAll': (index) => {
			const evt: EventApprovalForAll = {
				timestamp: Number(message[++index]),
				approval: message[++index][0]!='0',
				operator: message[++index],
				owner: message[++index],
			};
			this.emitter.emit('erc721_approvalForAll', evt);
		},
		'erc721.init': (index) => {
			const evt: EventInit = {
				timestamp: Number(message[++index]),
				name: message[++index],
				symbol: message[++index],
			};
			this.emitter.emit('erc721_init', evt);
		},
		'erc721.mint': (index) => {
			const evt: EventMint = {
				timestamp: Number(message[++index]),
				balance: BigInt(message[++index]),
				owner: message[++index],
				tokenID: message[++index],
			};
			this.emitter.emit('erc721_mint', evt);
		},
		'erc721.transfer': (index) => {
			const evt: EventTransfer = {
				timestamp: Number(message[++index]),
				from: message[++index],
				to: message[++index],
				tokenID: message[++index],
			};
			this.emitter.emit('erc721_transfer', evt);
		},
    };

    const topicIndex = 3;
    const topic = message[topicIndex];

    if (typeof messageHandlers[topic] != 'undefined') {
      messageHandlers[topic](topicIndex);
    }
}
