// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use wasmlib::host::*;

pub struct Treasure {
    pub amount : i64,  // how much to deposit
    pub name   : String,  // human readible name
    pub owner  : ScAgentID,  // who deposits the treasure
}

impl Treasure {
    pub fn from_bytes(bytes: &[u8]) -> Treasure {
        let mut decode = BytesDecoder::new(bytes);
        Treasure {
            amount : decode.int64(),
            name   : decode.string(),
            owner  : decode.agent_id(),
        }
    }

    pub fn to_bytes(&self) -> Vec<u8> {
        let mut encode = BytesEncoder::new();
		encode.int64(self.amount);
		encode.string(&self.name);
		encode.agent_id(&self.owner);
        return encode.data();
    }
}

pub struct ImmutableTreasure {
    pub(crate) obj_id: i32,
    pub(crate) key_id: Key32,
}

impl ImmutableTreasure {
    pub fn exists(&self) -> bool {
        exists(self.obj_id, self.key_id, TYPE_BYTES)
    }

    pub fn value(&self) -> Treasure {
        Treasure::from_bytes(&get_bytes(self.obj_id, self.key_id, TYPE_BYTES))
    }
}

pub struct MutableTreasure {
    pub(crate) obj_id: i32,
    pub(crate) key_id: Key32,
}

impl MutableTreasure {
    pub fn exists(&self) -> bool {
        exists(self.obj_id, self.key_id, TYPE_BYTES)
    }

    pub fn set_value(&self, value: &Treasure) {
        set_bytes(self.obj_id, self.key_id, TYPE_BYTES, &value.to_bytes());
    }

    pub fn value(&self) -> Treasure {
        Treasure::from_bytes(&get_bytes(self.obj_id, self.key_id, TYPE_BYTES))
    }
}
