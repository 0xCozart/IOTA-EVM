// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::structs::*;

pub struct ArrayOfImmutableTreasure {
	pub(crate) obj_id: i32,
}

impl ArrayOfImmutableTreasure {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

	pub fn get_treasure(&self, index: i32) -> ImmutableTreasure {
		ImmutableTreasure { obj_id: self.obj_id, key_id: Key32(index) }
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetAllTreasuresResults {
    pub(crate) id: i32,
}

impl ImmutableGetAllTreasuresResults {
    pub fn treasures(&self) -> ArrayOfImmutableTreasure {
		let arr_id = get_object_id(self.id, idx_map(IDX_RESULT_TREASURES), TYPE_ARRAY | TYPE_BYTES);
		ArrayOfImmutableTreasure { obj_id: arr_id }
	}
}

pub struct ArrayOfMutableTreasure {
	pub(crate) obj_id: i32,
}

impl ArrayOfMutableTreasure {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

	pub fn get_treasure(&self, index: i32) -> MutableTreasure {
		MutableTreasure { obj_id: self.obj_id, key_id: Key32(index) }
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetAllTreasuresResults {
    pub(crate) id: i32,
}

impl MutableGetAllTreasuresResults {
    pub fn treasures(&self) -> ArrayOfMutableTreasure {
		let arr_id = get_object_id(self.id, idx_map(IDX_RESULT_TREASURES), TYPE_ARRAY | TYPE_BYTES);
		ArrayOfMutableTreasure { obj_id: arr_id }
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetOwnerResults {
    pub(crate) id: i32,
}

impl ImmutableGetOwnerResults {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_RESULT_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetOwnerResults {
    pub(crate) id: i32,
}

impl MutableGetOwnerResults {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_RESULT_OWNER))
	}
}
