// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package myworld

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type Treasure struct {
	Amount int64             // how much to deposit
	Name   string            // human readible name
	Owner  wasmlib.ScAgentID // who deposits the treasure
}

func NewTreasureFromBytes(bytes []byte) *Treasure {
	decode := wasmlib.NewBytesDecoder(bytes)
	data := &Treasure{}
	data.Amount = decode.Int64()
	data.Name = decode.String()
	data.Owner = decode.AgentID()
	decode.Close()
	return data
}

func (o *Treasure) Bytes() []byte {
	return wasmlib.NewBytesEncoder().
		Int64(o.Amount).
		String(o.Name).
		AgentID(o.Owner).
		Data()
}

type ImmutableTreasure struct {
	objID int32
	keyID wasmlib.Key32
}

func (o ImmutableTreasure) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o ImmutableTreasure) Value() *Treasure {
	return NewTreasureFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}

type MutableTreasure struct {
	objID int32
	keyID wasmlib.Key32
}

func (o MutableTreasure) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o MutableTreasure) SetValue(value *Treasure) {
	wasmlib.SetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES, value.Bytes())
}

func (o MutableTreasure) Value() *Treasure {
	return NewTreasureFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}
