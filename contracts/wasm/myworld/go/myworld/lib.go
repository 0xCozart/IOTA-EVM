// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package myworld

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncDepositTreasure, funcDepositTreasureThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncSetOwner, funcSetOwnerThunk)
	exports.AddView(ViewGetAllTreasures, viewGetAllTreasuresThunk)
	exports.AddView(ViewGetOwner, viewGetOwnerThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type DepositTreasureContext struct {
	Params ImmutableDepositTreasureParams
	State  MutableMyWorldState
}

func funcDepositTreasureThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("myworld.funcDepositTreasure")
	f := &DepositTreasureContext{
		Params: ImmutableDepositTreasureParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableMyWorldState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Treasure().Exists(), "missing mandatory treasure")
	funcDepositTreasure(ctx, f)
	ctx.Log("myworld.funcDepositTreasure ok")
}

type InitContext struct {
	Params ImmutableInitParams
	State  MutableMyWorldState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("myworld.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableMyWorldState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcInit(ctx, f)
	ctx.Log("myworld.funcInit ok")
}

type SetOwnerContext struct {
	Params ImmutableSetOwnerParams
	State  MutableMyWorldState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("myworld.funcSetOwner")

	// current owner of this smart contract
	access := ctx.State().GetAgentID(wasmlib.Key("owner"))
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableMyWorldState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("myworld.funcSetOwner ok")
}

type GetAllTreasuresContext struct {
	Results MutableGetAllTreasuresResults
	State   ImmutableMyWorldState
}

func viewGetAllTreasuresThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("myworld.viewGetAllTreasures")
	f := &GetAllTreasuresContext{
		Results: MutableGetAllTreasuresResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableMyWorldState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetAllTreasures(ctx, f)
	ctx.Log("myworld.viewGetAllTreasures ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutableMyWorldState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("myworld.viewGetOwner")
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableMyWorldState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetOwner(ctx, f)
	ctx.Log("myworld.viewGetOwner ok")
}
