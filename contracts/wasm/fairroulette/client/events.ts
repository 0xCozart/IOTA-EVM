// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead


type Address = string;
type AgentID = string;
type ChainID = string;
type Color = string;
type Hash = string;
type Hname = string;
type Int16 = number;
type Int32 = number;
type Int64 = bigint;
type RequestID = string;
type String = string;

export class FairRouletteEvents {
  public static readonly EVENT_BET: string = 'fairroulette.bet';
  public static readonly EVENT_PAYOUT: string = 'fairroulette.payout';
  public static readonly EVENT_ROUND: string = 'fairroulette.round';
  public static readonly EVENT_START: string = 'fairroulette.start';
  public static readonly EVENT_STOP: string = 'fairroulette.stop';
  public static readonly EVENT_WINNER: string = 'fairroulette.winner';
}

export interface EventBet {
  timestamp: Int32;
  address: Address;
  amount: Int64;
  number: Int64;
}

export interface EventPayout {
  timestamp: Int32;
  address: Address;
  amount: Int64;
}

export interface EventRound {
  timestamp: Int32;
  number: Int64;
}

export interface EventStart {
  timestamp: Int32;
}

export interface EventStop {
  timestamp: Int32;
}

export interface EventWinner {
  timestamp: Int32;
  number: Int64;
}

  private handleVmMessage(message: string[]): void {
    const messageHandlers: MessageHandlers = {
      EVENT_BET: (index) => {
        const evt: EventBet = {
          timestamp: message[index + 1],
          address: message[index + 2],
          amount: message[index + 2],
          number: message[index + 2],
        };
        this.emitter.emit(EVENT_BET, evt);
      },
      EVENT_PAYOUT: (index) => {
        const evt: EventPayout = {
          timestamp: message[index + 1],
          address: message[index + 2],
          amount: message[index + 2],
        };
        this.emitter.emit(EVENT_PAYOUT, evt);
      },
      EVENT_ROUND: (index) => {
        const evt: EventRound = {
          timestamp: message[index + 1],
          number: message[index + 2],
        };
        this.emitter.emit(EVENT_ROUND, evt);
      },
      EVENT_START: (index) => {
        const evt: EventStart = {
          timestamp: message[index + 1],
        };
        this.emitter.emit(EVENT_START, evt);
      },
      EVENT_STOP: (index) => {
        const evt: EventStop = {
          timestamp: message[index + 1],
        };
        this.emitter.emit(EVENT_STOP, evt);
      },
      EVENT_WINNER: (index) => {
        const evt: EventWinner = {
          timestamp: message[index + 1],
          number: message[index + 2],
        };
        this.emitter.emit(EVENT_WINNER, evt);
      },
    };

    const topicIndex = 3;
    const topic = message[topicIndex];

    if (typeof messageHandlers[topic] != 'undefined') {
      messageHandlers[topic](topicIndex);
    }
  }
