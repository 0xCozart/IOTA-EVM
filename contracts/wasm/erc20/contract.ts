// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "../wasmlib"
import * as sc from "./index";

export class ApproveCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncApprove);
    params: sc.MutableApproveParams = new sc.MutableApproveParams();
}

export class InitCall {
    func: wasmlib.ScInitFunc = new wasmlib.ScInitFunc(sc.HScName, sc.HFuncInit);
    params: sc.MutableInitParams = new sc.MutableInitParams();
}

export class TransferCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTransfer);
    params: sc.MutableTransferParams = new sc.MutableTransferParams();
}

export class TransferFromCall {
    func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncTransferFrom);
    params: sc.MutableTransferFromParams = new sc.MutableTransferFromParams();
}

export class AllowanceCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewAllowance);
    params: sc.MutableAllowanceParams = new sc.MutableAllowanceParams();
    results: sc.ImmutableAllowanceResults = new sc.ImmutableAllowanceResults();
}

export class BalanceOfCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewBalanceOf);
    params: sc.MutableBalanceOfParams = new sc.MutableBalanceOfParams();
    results: sc.ImmutableBalanceOfResults = new sc.ImmutableBalanceOfResults();
}

export class TotalSupplyCall {
    func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewTotalSupply);
    results: sc.ImmutableTotalSupplyResults = new sc.ImmutableTotalSupplyResults();
}

export class ScFuncs {

    static approve(ctx: wasmlib.ScFuncCallContext): ApproveCall {
        let f = new ApproveCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static init(ctx: wasmlib.ScFuncCallContext): InitCall {
        let f = new InitCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static transfer(ctx: wasmlib.ScFuncCallContext): TransferCall {
        let f = new TransferCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static transferFrom(ctx: wasmlib.ScFuncCallContext): TransferFromCall {
        let f = new TransferFromCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static allowance(ctx: wasmlib.ScViewCallContext): AllowanceCall {
        let f = new AllowanceCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static balanceOf(ctx: wasmlib.ScViewCallContext): BalanceOfCall {
        let f = new BalanceOfCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static totalSupply(ctx: wasmlib.ScViewCallContext): TotalSupplyCall {
        let f = new TotalSupplyCall();
        f.func.setPtrs(null, f.results);
        return f;
    }
}
